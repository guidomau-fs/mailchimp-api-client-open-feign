package com.brightmarket.mailchimp.api.model.error;

import com.fasterxml.jackson.annotation.*;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Error Response
 * <p>
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
        "type",
        "title",
        "status",
        "detail",
        "instance",
        "errors"
})
public class Error {

    @JsonProperty("type")
    @JsonPropertyDescription("Problem Type. An absolute URI that identifies the problem type. " +
            "When dereferenced, it should provide human-readable documentation for the problem type.")
    private String type;

    @JsonProperty("title")
    @JsonPropertyDescription("Error Title. A short, human-readable summary of the problem type. " +
            "It shouldn't change based on the occurrence of the problem, except for purposes of localization.")
    private String title;

    @JsonProperty("status")
    @JsonPropertyDescription("HTTP Status Code. The HTTP status code (RFC2616, Section 6) " +
            "generated by the origin server for this occurrence of the problem.")
    private Integer status;

    @JsonProperty("detail")
    @JsonPropertyDescription("Error Message. A human-readable explanation specific to this occurrence of the problem.")
    private String detail;

    @JsonProperty("instance")
    @JsonPropertyDescription("Instance ID. A string that identifies this specific occurrence of the problem. " +
            "Please provide this ID when contacting support..")
    private String instance;

    @JsonProperty("errors")
    @JsonPropertyDescription("An array of errors details, each representing an cause resource.")
    private List<Cause> errors = null;

    @JsonIgnore
    private Map<String, Object> additionalProperties = new HashMap<String, Object>();

    public Error() {
        super();
    }

    public Error(String type, String title, Integer status, String detail, String instance, List<Cause> errors) {
        super();
        this.type = type;
        this.title = title;
        this.status = status;
        this.detail = detail;
        this.instance = instance;
        this.errors = errors;
    }

    @JsonProperty("type")
    public String getType() {
        return type;
    }

    @JsonProperty("type")
    public void setType(String type) {
        this.type = type;
    }

    public Error withType(String type) {
        this.type = type;
        return this;
    }

    @JsonProperty("title")
    public String getTitle() {
        return title;
    }

    @JsonProperty("title")
    public void setTitle(String title) {
        this.title = title;
    }

    public Error withTitle(String title) {
        this.title = title;
        return this;
    }

    @JsonProperty("status")
    public Integer getStatus() {
        return status;
    }

    @JsonProperty("status")
    public void setStatus(Integer status) {
        this.status = status;
    }

    public Error withStatus(Integer status) {
        this.status = status;
        return this;
    }

    @JsonProperty("detail")
    public String getDetail() {
        return detail;
    }

    @JsonProperty("detail")
    public void setDetail(String detail) {
        this.detail = detail;
    }

    public Error withDetail(String detail) {
        this.detail = detail;
        return this;
    }

    @JsonProperty("instance")
    public String getInstance() {
        return instance;
    }

    @JsonProperty("instance")
    public void setInstance(String instance) {
        this.instance = instance;
    }

    public Error withInstance(String instance) {
        this.instance = instance;
        return this;
    }

    @JsonProperty("errors")
    public List<Cause> getErrors() {
        return errors;
    }

    @JsonProperty("errors")
    public void setErrors(List<Cause> errors) {
        this.errors = errors;
    }

    public Error withErrors(List<Cause> errors) {
        this.errors = errors;
        return this;
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    @JsonAnySetter
    public void setAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
    }

    public Error withAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
        return this;
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder()
                .append(type).append(title)
                .append(status).append(detail)
                .append(instance).append(errors).toHashCode();
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Cause) == false) {
            return false;
        }
        Error rhs = ((Error) other);
        return new EqualsBuilder()
                .append(type, rhs.type)
                .append(title, rhs.title)
                .append(status, rhs.status)
                .append(detail, rhs.detail)
                .append(instance, rhs.instance)
                .append(errors, rhs.errors).isEquals();
    }
}
